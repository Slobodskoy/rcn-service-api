// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ozonmp/rcn_service_api/v1/rcn_service_api.proto

package rcn_service_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Service) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return ServiceValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	if utf8.RuneCountInString(m.GetTitle()) < 5 {
		return ServiceValidationError{
			field:  "Title",
			reason: "value length must be at least 5 runes",
		}
	}

	// no validation rules for Description

	// no validation rules for Rating

	return nil
}

// ServiceValidationError is the validation error returned by Service.Validate
// if the designated constraints aren't met.
type ServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceValidationError) ErrorName() string { return "ServiceValidationError" }

// Error satisfies the builtin error interface
func (e ServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceValidationError{}

// Validate checks the field values on CreateServiceV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateServiceV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceV1RequestValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateServiceV1RequestValidationError is the validation error returned by
// CreateServiceV1Request.Validate if the designated constraints aren't met.
type CreateServiceV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceV1RequestValidationError) ErrorName() string {
	return "CreateServiceV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceV1RequestValidationError{}

// Validate checks the field values on CreateServiceV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateServiceV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ServiceId

	return nil
}

// CreateServiceV1ResponseValidationError is the validation error returned by
// CreateServiceV1Response.Validate if the designated constraints aren't met.
type CreateServiceV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceV1ResponseValidationError) ErrorName() string {
	return "CreateServiceV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceV1ResponseValidationError{}

// Validate checks the field values on DescribeServiceV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeServiceV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ServiceId

	return nil
}

// DescribeServiceV1RequestValidationError is the validation error returned by
// DescribeServiceV1Request.Validate if the designated constraints aren't met.
type DescribeServiceV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeServiceV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeServiceV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeServiceV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeServiceV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeServiceV1RequestValidationError) ErrorName() string {
	return "DescribeServiceV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeServiceV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeServiceV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeServiceV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeServiceV1RequestValidationError{}

// Validate checks the field values on DescribeServiceV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeServiceV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeServiceV1ResponseValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeServiceV1ResponseValidationError is the validation error returned by
// DescribeServiceV1Response.Validate if the designated constraints aren't met.
type DescribeServiceV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeServiceV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeServiceV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeServiceV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeServiceV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeServiceV1ResponseValidationError) ErrorName() string {
	return "DescribeServiceV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeServiceV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeServiceV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeServiceV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeServiceV1ResponseValidationError{}

// Validate checks the field values on ListServiceV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListServiceV1Request) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListServiceV1RequestValidationError is the validation error returned by
// ListServiceV1Request.Validate if the designated constraints aren't met.
type ListServiceV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceV1RequestValidationError) ErrorName() string {
	return "ListServiceV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceV1RequestValidationError{}

// Validate checks the field values on ListServiceV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListServiceV1Response) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServiceV1ResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListServiceV1ResponseValidationError is the validation error returned by
// ListServiceV1Response.Validate if the designated constraints aren't met.
type ListServiceV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceV1ResponseValidationError) ErrorName() string {
	return "ListServiceV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceV1ResponseValidationError{}

// Validate checks the field values on RemoveServiceV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveServiceV1Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ServiceId

	return nil
}

// RemoveServiceV1RequestValidationError is the validation error returned by
// RemoveServiceV1Request.Validate if the designated constraints aren't met.
type RemoveServiceV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveServiceV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveServiceV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveServiceV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveServiceV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveServiceV1RequestValidationError) ErrorName() string {
	return "RemoveServiceV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveServiceV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveServiceV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveServiceV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveServiceV1RequestValidationError{}

// Validate checks the field values on RemoveServiceV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveServiceV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Found

	return nil
}

// RemoveServiceV1ResponseValidationError is the validation error returned by
// RemoveServiceV1Response.Validate if the designated constraints aren't met.
type RemoveServiceV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveServiceV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveServiceV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveServiceV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveServiceV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveServiceV1ResponseValidationError) ErrorName() string {
	return "RemoveServiceV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveServiceV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveServiceV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveServiceV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveServiceV1ResponseValidationError{}
